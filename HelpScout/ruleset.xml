<?xml version="1.0"?>
<ruleset name="HelpScout">
    <description>The Help Scout PHP Coding Standard.</description>

    <!-- Include PSR12 standards. -->
    <rule ref="PSR12"/>

    <!-- In files without a header comment, we don't want an extra newline -->
    <rule ref="PSR12.Files.FileHeader.SpacingAfterBlock">
        <severity>0</severity>
    </rule>

    <!-- Warn about statements that have no executable code. -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <type>warning</type>
    </rule>

    <!-- Verifies that inline control statements are not present. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- Ensures each statement is on a line by itself. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Ensures there is a single space after cast tokens. -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <!-- Checks that calls to methods and functions are spaced correctly. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

    <!-- Ensures that constant names are all uppercase. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Discourages the use of deprecated PHP functions. -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Makes sure that shorthand PHP open tags are not used. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- Checks that all uses of true, false and null are lowercase. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Checks that all PHP keywords are lowercase. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- Throws errors if tabs are used for indentation. -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- Checks that control structures are defined and indented correctly. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>

    <!-- Ensure multi-line IF conditions are defined correctly. -->
    <rule ref="PEAR.ControlStructures.MultiLineCondition"/>

    <!-- If an assignment goes over two lines, ensure the equal sign is indented. -->
    <rule ref="PEAR.Formatting.MultiLineAssignment"/>

    <!-- Ensures function params with default values are at the end of the declaration. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Ensures the file ends with a newline character. Git prefers this. -->
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!-- Parses and verifies the variable doc comment. -->
    <rule ref="Squiz.Commenting.VariableComment">
        <!-- Omit the boolean and integer long form type names in hints. -->
        <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
    </rule>

    <!-- Warn about commented out code. -->
    <rule ref="Squiz.PHP.CommentedOutCode"/>

    <!-- Checks that the file does not end with a closing tag. -->
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- We prefer not to use underscores on private properties -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>

    <!-- PHPStorm prefers throws annotations from deeper code as well, -->
    <!-- this causes the number in the method and the number in the phpdoc -->
    <!-- to mismatch -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag">
        <exclude name="Squiz.Commenting.FunctionCommentThrowTag.WrongNumber"/>
    </rule>

    <!-- Prohibit the use of xdebug functions in production code -->
    <rule ref="HelpScout.Functions.DisallowXDebug"/>

    <!-- HS-APP Controllers Violate PSR0 -->
    <rule ref="PSR1.Classes.ClassDeclaration">
        <exclude-pattern>*/controllers/*</exclude-pattern>
    </rule>
    <rule ref="PSR1.Files.SideEffects">
        <exclude-pattern>*/controllers/*</exclude-pattern>
    </rule>

    <!-- HS-APP Tests Violate PSR0 -->
    <rule ref="PSR1.Classes.ClassDeclaration">
        <exclude-pattern>test/*</exclude-pattern>
    </rule>

    <!-- Lines can be 120 chars long, but never show errors -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="80"/>
            <property name="absoluteLineLimit" value="120"/>
        </properties>
    </rule>

    <!-- Use Unix newlines -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- Have 8 chars padding maximum and always show as errors -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="8"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- We allow empty catch statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
        <severity>0</severity>
    </rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
        <!-- Allow content after a open parenthesis. smarty($template, [\n -->
        <exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
        <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
        <!-- And the same for closing ]); -->
        <exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>
    </rule>

    <!-- Relaxing several commenting sniffs from Squiz -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Comment missing for @throws tag in function comment -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <!-- Allow no comment at all -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <!-- Methods with type definitions don't need an @return -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <!-- Type hinted parameters don't need an @param -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
        <!-- We don't mind a parameter without a comment. Well named is good enough -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
        <!-- No need for periods on the end of comments -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- No need for Capitalization rules, we're not publishing docs -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <!-- We occasionally need to lie about Doctrine returns types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
        <!-- We occasionally need to lie about Doctrine parameter types in the phpdocs -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- We occasionally need to lie about Doctrine returns types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>
    </rule>
</ruleset>
